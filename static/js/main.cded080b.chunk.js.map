{"version":3,"sources":["Images/themoviedb.svg","components/Display/Display.module.scss","components/Footer/Footer.module.scss","components/Display/Display.js","components/Dropdown/Dropdown.js","components/SearchBar/SearchBar.js","components/Footer/Footer.js","App.js","hooks/FetchMovie.js","serviceWorker.js","index.js"],"names":["module","exports","Display","props","movie","console","log","genres","className","classes","Display__ImgCard","src","poster","alt","Display__Text","title","Highted","tagline","overview","productionCompany","releaseDate","runtime","revenue","averageScore","buget","Dropdown","movies","map","index","key","value","onClick","e","setMovie","SearchBar","width","logo","placeholder","type","onChange","search","length","Footer","App","useState","setSearch","movieID","setMovieID","searchResult","setSearchResult","currentMovie","setCurrentMovie","error","setError","useEffect","axios","get","process","then","res","i","data","production_companies","name","productionData","productionCompanies","forEach","item","genreData","genre","set","id","release_date","backdrop","backdrop_path","poster_path","vote_average","language","original_language","Number","budget","toFixed","toLocaleString","catch","isCancel","FetchMovie","result","results","slice","style","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","height","filter","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cded080b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/themoviedb.24a6fdb9.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Display\":\"Display_Display__3dHfp\",\"Display__ImgCard\":\"Display_Display__ImgCard__3tV2i\",\"Display__Text\":\"Display_Display__Text__H3j8u\",\"Highted\":\"Display_Highted__3HKgm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer_Footer__3HbVs\"};","import React from 'react'\r\nimport classes from './Display.module.scss'\r\n\r\nexport default function Display(props) {\r\n    let movie = props.movie;\r\n    console.log(movie.genres)\r\n\r\n    // console.log(movie.genres);\r\n    // for(let i = 0; i < movie.genres.length -1; i++){\r\n    //     movie.genres[i].name = movie.genres[i].name + \", \"\r\n    // }\r\n\r\n    // console.log(movie.genres);\r\n\r\n\r\n    return (\r\n        <div >  \r\n            <div className={classes.Display}>\r\n                <img className={classes.Display__ImgCard} src={`https://image.tmdb.org/t/p/original${movie.poster}`} alt=\"\"/>\r\n               \r\n                <div className={classes.Display__Text} >\r\n                    <h1>{movie.title}</h1>\r\n                    <p className={classes.Highted}>{movie.tagline}</p>\r\n                    <p className=\"overview\">{movie.overview}</p>\r\n\r\n                    <h4 className={classes.Highted}>{movie.genres}</h4>\r\n                    <h4>{movie.productionCompany}</h4>\r\n                    <div className=\"info-container\">\r\n                        <div className=\"info-item\">\r\n                            <p>Release Date:</p>\r\n                            <h4 className={classes.Highted}>{movie.releaseDate}</h4>\r\n                        </div>\r\n                        <div className=\"info-item\">\r\n                            <p>Running Time:</p>\r\n                            <h4 className={classes.Highted}>{movie.runtime}</h4>\r\n                        </div>\r\n                        <div className=\"info-item\">\r\n                            <p>Box Office:</p>\r\n                            <h4 className={classes.Highted}>${movie.revenue}</h4>\r\n                        </div>\r\n                        <div className=\"info-item\">\r\n                            <p>Vote Average:</p>\r\n                            <h4 className={classes.Highted}>{movie.averageScore}/10</h4>\r\n                        </div>\r\n                        <div className=\"info-item\">\r\n                            <p>Buget:</p>\r\n                            <h4 className={classes.Highted}>${movie.buget}</h4>\r\n                        </div>\r\n                    </div>  \r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Dropdown(props) {\r\n    return (\r\n        <div className='dropdown'>\r\n            {props.movies.map((movie, index) => {\r\n                return(\r\n                <button className=\"dropdown__item\" key={index} value={movie.title} onClick={e => props.setMovie(e)}>{movie.title}</button>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport DropDown from '../Dropdown/Dropdown';\r\nimport logo from '../../Images/themoviedb.svg'\r\n\r\n\r\nexport default function SearchBar(props) {\r\n\r\n    return (\r\n        <div className='searchbar'>\r\n            <div>\r\n                <img width=\"100px\" src={logo} alt=\"\"/>\r\n            </div>\r\n            <div className=\"searchbar__container\">\r\n                <input className='searchbar__input' placeholder=\"Search Movie Titles\" type=\"text\" onChange={props.search}/>  \r\n                {props.movies.length > 0 ? <DropDown movies={props.movies} setMovie={props.setMovie} /> : null}      \r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport classes from './Footer.module.scss';\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <div className={classes.Footer}>\r\n            <p>Created By: Rene Laverdure</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nimport Display from './components/Display/Display';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport Footer from './components/Footer/Footer';\n\nimport FetchMovie from './hooks/FetchMovie'\n\nfunction App() {\n  const [search, setSearch] = useState('');\n  const [movieID, setMovieID] = useState(348)\n  const [searchResult, setSearchResult] = useState([]);\n  const [currentMovie, setCurrentMovie] = useState({});\n\n  const {movie} = FetchMovie(movieID)\n\n  useEffect(() => {\n      axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_API_KEY}&query=${search}`)\n      .then(res => {\n          let result = res.data.results.slice(0, 5);\n          setSearchResult([...result]);\n      }) \n\n  }, [search])\n\n  useEffect(() => {\n    setCurrentMovie({...movie})\n  }, [movie])\n\n\n  const selectedMovie = (e) => {\n    let set = [...searchResult];\n    set = set.filter(movie => movie.title === e.target.value);\n\n    setMovieID(set[0].id)\n    setSearchResult([])\n  }\n\n  const backdrop = `https://image.tmdb.org/t/p/original${currentMovie.backdrop}`\n  const style = {\n        backgroundImage: `url(${backdrop})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        backgroundSize: 'cover',\n        height: '100vh',\n      }\n\n\n  return (\n    <div style={style} className=\"App\">\n      <div className='BackDropShade'>\n        \n        <div className=\"container\">\n          <SearchBar movies={searchResult} setMovie={selectedMovie} search={e => setSearch(e.target.value)} />  \n          <Display movie={currentMovie} /> \n          \n        </div>\n\n\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n ","import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default function FetchMovie(movieID) {\r\n    const [movie, setMovie] = useState({});\r\n    const [error, setError] = useState(false)\r\n    \r\n    useEffect(() => {\r\n        axios.get(`\r\n        https://api.themoviedb.org/3/movie/${movieID}?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`)\r\n            .then(res => {\r\n              \r\n              for(let i = 0; i < res.data.production_companies.length -1; i++){\r\n                res.data.production_companies[i].name = res.data.production_companies[i].name + \", \";\r\n              };\r\n    \r\n              for(let i = 0; i < res.data.genres.length -1; i++){\r\n                res.data.genres[i].name = res.data.genres[i].name + \", \";\r\n              };\r\n    \r\n              let productionData = [...res.data.production_companies];\r\n              let productionCompanies = \"\";\r\n     \r\n              productionData.forEach(item => {\r\n                productionCompanies = productionCompanies + item.name\r\n              })\r\n         \r\n              let genreData = [...res.data.genres]\r\n              let genre = \"\";\r\n    \r\n              genreData.forEach(item => {\r\n                genre = genre + item.name\r\n              })\r\n    \r\n                let set = {\r\n                  id: res.data.id,\r\n                  title: res.data.title,\r\n                  releaseDate: res.data.release_date,\r\n                  overview: res.data.overview,\r\n                  backdrop: res.data.backdrop_path,\r\n                  poster: res.data.poster_path,\r\n                  averageScore: res.data.vote_average,\r\n                  language:  res.data.original_language,\r\n                  buget: Number((res.data.budget).toFixed(1)).toLocaleString(),\r\n                  genres: genre,\r\n                  productionCompany: productionCompanies,\r\n                  runtime: res.data.runtime,\r\n                  revenue: Number((res.data.revenue).toFixed(1)).toLocaleString(),\r\n                  tagline: res.data.tagline\r\n                }\r\n             \r\n                setMovie({...set});       \r\n            })\r\n            .catch(e => {\r\n                if(axios.isCancel(e)){\r\n                    return setError(true)\r\n                }\r\n            })\r\n        }, [movieID])\r\n\r\n        console.log(movie)\r\n        return {movie, error}\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}